{"version":3,"sources":["Editor/index.js","App.js","index.js"],"names":["decorators","CompositeDecorator","strategy","contentBlock","callback","contentState","findEntityRanges","character","entityKey","getEntity","getType","component","props","url","getData","href","title","className","children","RhEditor","state","editorState","EditorState","createEmpty","editorText","focused","toggleInlineStyle","bind","toggleBlockType","onChange","toggleActive","onAddLink","this","showControls","setState","startingBlocks","blocksFromHTML","convertFromRaw","JSON","parse","initial","createWithContent","inlineStyle","RichUtils","blockType","currentSelection","selectionState","getSelection","anchorKey","getAnchorKey","currentContentBlock","getCurrentContent","getBlockForKey","start","getStartOffset","end","getEndOffset","getText","slice","length","convertedText","stateToHTML","recieveHtml","recieveEditorState","rawDraftContentState","stringify","convertToRaw","link","contentWithEntity","createEntity","newEditorState","push","getLastCreatedEntityKey","toggleLink","currentBlock","getStartKey","currentBlockKey","getKey","blockMap","getBlockMap","blocksBefore","toSeq","takeUntil","v","blocksAfter","skipUntil","rest","newBlockKey","genKey","newBlock","ContentBlock","key","type","text","characterList","List","Repeat","CharacterMetadata","create","newBlockMap","concat","toOrderedMap","selection","newContent","merge","selectionBefore","selectionAfter","anchorOffset","focusKey","focusOffset","isBackward","newSelection","SelectionState","contentStateWithEntity","forceSelection","set","currentContent","active","onToggle","onToggleBlockType","AddLink","placeholder","spellCheck","onFocus","onBlur","Component","EditorControls","currentStyle","getCurrentInlineStyle","MEDIA_BUTTONS","map","label","addLink","INLINE_STYLES","has","style","BLOCK_TYPES","EditorButton","e","preventDefault","onMouseDown","LinkButton","addingLink","anchor","changeAnchor","node","wrapperRef","target","value","onClick","autoFocus","content","console","log","App","useState","output","setValue","dangerouslySetInnerHTML","__html","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7766e44.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { EditorState, RichUtils, ContentBlock, genKey, CharacterMetadata, SelectionState, CompositeDecorator, Editor, convertFromRaw, convertToRaw } from 'draft-js';\nimport { List, Repeat } from 'immutable'\nimport { stateToHTML } from 'draft-js-export-html';\n\nimport './editor.css';\n\n\nfunction findLinkEntities(contentBlock, callback, contentState) {\n  contentBlock.findEntityRanges(\n    (character) => {\n      const entityKey = character.getEntity();\n      return (\n        entityKey !== null &&\n        contentState.getEntity(entityKey).getType() === 'LINK'\n      );\n    },\n    callback\n  );\n}\n\nconst Link = (props) => {\n  const { url } = props.contentState.getEntity(props.entityKey).getData();\n\n  return (\n    <a href={url} title={url} className=\"link\">\n      {props.children}\n    </a>\n  );\n};\n\nconst decorators = new CompositeDecorator([\n   {\n     strategy: findLinkEntities,\n     component: Link,\n   },\n ]);\n\nclass RhEditor extends Component {\n    constructor (props) {\n        super(props)\n\n        this.state = {\n            editorState: EditorState.createEmpty(),\n            editorText: '',\n            focused: false,\n        }\n\n        this.toggleInlineStyle = this.toggleInlineStyle.bind(this);\n        this.toggleBlockType = this.toggleBlockType.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.toggleActive = this.toggleActive.bind(this);\n        this.onAddLink = this.onAddLink.bind(this);\n    }\n\n    componentDidMount(){\n        if(this.props.showControls){\n            this.setState({\n                focused: true\n            })\n        }\n        if(this.props.startingBlocks){\n            const blocksFromHTML = convertFromRaw(JSON.parse( this.props.startingBlocks));\n            let initial = EditorState.createWithContent(blocksFromHTML, decorators);\n            this.setState({\n                editorState: initial\n            })\n        }\n    }\n\n    toggleInlineStyle(inlineStyle){\n        this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle));\n    }\n\n    toggleBlockType(blockType){\n        this.onChange(RichUtils.toggleBlockType(this.state.editorState, blockType));\n    }\n\n    onChange(editorState){\n        const selectionState = editorState.getSelection();\n        const anchorKey = selectionState.getAnchorKey();\n        const currentContent = editorState.getCurrentContent();\n        const currentContentBlock = currentContent.getBlockForKey(anchorKey);\n        const start = selectionState.getStartOffset();\n        const end = selectionState.getEndOffset();\n        const selectedText = currentContentBlock.getText().slice(start, end);\n\n        let currentSelection;\n        if(selectedText.length > 0){\n            currentSelection = selectionState;\n        } else {\n            currentSelection = null;\n        }\n\n        const convertedText = stateToHTML(editorState.getCurrentContent());\n        this.setState({\n            editorState: editorState,\n            editorText: convertedText,\n            currentSelection: currentSelection\n        });\n        if(this.props.recieveHtml){\n            this.props.recieveHtml(convertedText);\n        }\n        if(this.props.recieveEditorState){\n            const rawDraftContentState = JSON.stringify( convertToRaw(editorState.getCurrentContent()) );\n            this.props.recieveEditorState(rawDraftContentState);\n        }\n    }\n\n    toggleActive(){\n        const { focused } = this.state;\n        if(!this.props.showControls){\n            this.setState({\n                focused: !focused\n            })\n        }\n    }\n\n    onAddLink(link){\n        const { editorState, currentSelection } = this.state;\n\n        if(currentSelection){\n            const content = editorState.getCurrentContent();\n            const contentWithEntity = content.createEntity(\"LINK\", \"IMMUTABLE\", {\n                url: link\n            });\n            let newEditorState = EditorState.push(\n                editorState,\n                contentWithEntity,\n                \"create-entity\"\n            );\n            const entityKey = contentWithEntity.getLastCreatedEntityKey();\n            newEditorState = RichUtils.toggleLink(newEditorState, newEditorState.getSelection(), entityKey);\n\n            const rawDraftContentState = JSON.stringify( convertToRaw(newEditorState.getCurrentContent()) );\n            const blocksFromHTML = convertFromRaw(JSON.parse( rawDraftContentState));\n            let initial = EditorState.createWithContent(blocksFromHTML, decorators);\n\n            this.onChange(initial);\n            this.setState({\n                currentSelection: null\n            })\n        } else {\n            const selectionState = editorState.getSelection();\n            const contentState = editorState.getCurrentContent();\n            const currentBlock = contentState.getBlockForKey(selectionState.getStartKey());\n            const currentBlockKey = currentBlock.getKey();\n            const blockMap = contentState.getBlockMap();\n            const blocksBefore = blockMap.toSeq().takeUntil((v) => (v === currentBlock));\n            const blocksAfter = blockMap.toSeq().skipUntil((v) => (v === currentBlock)).rest();\n            const newBlockKey = genKey();\n\n            const newBlock = new ContentBlock({\n              key: newBlockKey,\n              type: 'unstyled',\n              text: link,\n              characterList: new List(Repeat(CharacterMetadata.create(), link.length)),\n            });\n\n            const newBlockMap = blocksBefore.concat(\n              [[currentBlockKey, currentBlock], [newBlockKey, newBlock]],\n              blocksAfter\n            ).toOrderedMap();\n\n            const selection = editorState.getSelection();\n\n            const newContent = contentState.merge({\n              blockMap: newBlockMap,\n              selectionBefore: selection,\n              selectionAfter: selection.merge({\n                anchorKey: newBlockKey,\n                anchorOffset: 0,\n                focusKey: newBlockKey,\n                focusOffset: 0,\n                isBackward: false,\n              }),\n            });\n\n            let newEditorState = EditorState.push(editorState, newContent, 'split-block');\n\n            let newSelection = new SelectionState({\n              anchorKey: newBlockKey,\n              anchorOffset: 0,\n              focusKey: newBlockKey,\n              focusOffset: link.length\n            });\n\n            newEditorState = EditorState.forceSelection(newEditorState, newSelection);\n\n            const newContentState = newEditorState.getCurrentContent();\n            const contentStateWithEntity = newContentState.createEntity(\n              'LINK',\n              'IMMUTABLE',\n              { url: link }\n            );\n\n            const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n            newEditorState = EditorState.set(newEditorState, { currentContent: contentStateWithEntity });\n\n            newEditorState = RichUtils.toggleLink(newEditorState, newEditorState.getSelection(), entityKey);\n\n            // reset selection\n            newSelection = new SelectionState({\n              anchorKey: newBlockKey,\n              anchorOffset: link.length,\n              focusKey: newBlockKey,\n              focusOffset: link.length\n            });\n\n            newEditorState = EditorState.forceSelection(newEditorState, newSelection);\n            const rawDraftContentState = JSON.stringify( convertToRaw(newEditorState.getCurrentContent()) );\n            const blocksFromHTML = convertFromRaw(JSON.parse( rawDraftContentState));\n            let initial = EditorState.createWithContent(blocksFromHTML, decorators);\n\n            this.onChange(initial);\n        }\n\n    }\n\n\n    render(){\n        const { editorState } = this.state;\n        return(\n            <div className=\"wrapper\">\n                <EditorControls\n                    active={this.state.focused}\n                    editorState={editorState}\n                    onToggle={this.toggleInlineStyle}\n                    onToggleBlockType={this.toggleBlockType}\n                    AddLink={this.onAddLink}\n                />\n                <Editor\n                    editorState={editorState}\n                    decorators={decorators}\n                    placeholder={this.props.placeholder?this.props.placeholder: 'Add Text Here'}\n                    spellCheck={true}\n                    onChange={this.onChange}\n                    onFocus={this.toggleActive}\n                    onBlur={this.toggleActive}\n                />\n            </div>\n        )\n    }\n}\n\nexport default RhEditor;\n\nconst EditorControls = (props) => {\n    var currentStyle = props.editorState.getCurrentInlineStyle();\n    const selection = props.editorState.getSelection();\n    const blockType = props.editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n    return (\n        <div className={`editorControls ${props.active? 'open': ''}`}>\n            {MEDIA_BUTTONS.map(\n                type => <LinkButton\n                    key={type.label}\n                    label={type.label}\n                    addLink={props.AddLink}\n                />\n            )}\n            {INLINE_STYLES.map(\n                type => <EditorButton\n                key={type.label}\n                active={currentStyle.has(type.style)}\n                label={type.label}\n                onToggle={props.onToggle}\n                style={type.style}\n                />\n            )}\n            {BLOCK_TYPES.map(\n                (type) => <EditorButton\n                key={type.label}\n                active={type.style === blockType}\n                label={type.label}\n                onToggle={props.onToggleBlockType}\n                style={type.style}\n                />\n            )}\n        </div>\n    );\n};\n\nconst INLINE_STYLES = [\n    {\n        label: 'B',\n        style: 'BOLD'\n    }, {\n        label: 'I',\n        style: 'ITALIC'\n    }, {\n        label: 'U',\n        style: 'UNDERLINE'\n    }\n];\n\nconst BLOCK_TYPES = [\n    {\n        label: 'H1',\n        style: 'header-one'\n    }, {\n        label: 'H2',\n        style: 'header-two'\n    }, {\n        label: 'H3',\n        style: 'header-three'\n    }, {\n        label: 'H4',\n        style: 'header-four'\n    }, {\n        label: 'H5',\n        style: 'header-five'\n    }, {\n        label: 'H6',\n        style: 'header-six'\n    }, {\n        label: 'UL',\n        style: 'unordered-list-item'\n    }, {\n        label: 'OL',\n        style: 'ordered-list-item'\n    }\n];\n\nconst MEDIA_BUTTONS = [\n    {\n        label: 'Link',\n        style: 'ANCHOR'\n    }\n];\n\nclass EditorButton extends Component {\n    constructor() {\n        super();\n\n        this.onToggle = this.onToggle.bind(this);\n    }\n\n    onToggle(e){\n        e.preventDefault();\n        this.props.onToggle(this.props.style)\n    }\n\n    render() {\n        let className = 'editorButton';\n        if (this.props.active) {\n            className += ' editorButtonActive';\n        }\n        return (\n            <span className={className} onMouseDown={this.onToggle}>\n                {this.props.label}\n            </span>\n        );\n    }\n}\n\nclass LinkButton extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            addingLink: false,\n            anchor: '',\n        }\n\n        this.onToggle = this.onToggle.bind(this);\n        this.changeAnchor = this.changeAnchor.bind(this);\n        this.addLink = this.addLink.bind(this);\n    }\n\n    onToggle(e){\n        e.preventDefault();\n        this.setState({\n            addingLink: !this.state.addingLink,\n            anchor: ''\n        })\n    }\n\n    setWrapperRef(node){\n      this.wrapperRef = node;\n    }\n\n    changeAnchor(e){\n        this.setState({\n            anchor: e.target.value\n        })\n    }\n\n    addLink(e){\n        e.preventDefault();\n        const { anchor } = this.state;\n        this.setState({\n            anchor: '',\n            addingLink: false\n        });\n        this.props.addLink(anchor);\n    }\n\n    render() {\n        const { addingLink, anchor } = this.state;\n        let className = 'editorButton';\n        if (this.state.addingLink) {\n            className += ' editorButtonActive';\n        }\n        return (\n            <span className={`rhLinkContainer ${className}`}>\n                <span onClick={this.onToggle}>{this.props.label}</span>\n                   {\n                       addingLink &&\n                         <div className=\"tooltip\">\n                            <div className=\"tooltipGroup\">\n                                <input placeholder=\"Enter URL..\" value={anchor} autoFocus onChange={this.changeAnchor}/>\n                                <button onClick={this.addLink}>Insert</button>\n                            </div>\n                         </div>\n                   }\n            </span>\n        );\n    }\n}\n","import React, { useState } from 'react';\nimport './app.css';\n\nimport RhEditor from './Editor'\n\nconst content = \"{\\\"blocks\\\":[{\\\"key\\\":\\\"7r7mr\\\",\\\"text\\\":\\\"This is a new test again\\\",\\\"type\\\":\\\"unstyled\\\",\\\"depth\\\":0,\\\"inlineStyleRanges\\\":[],\\\"entityRanges\\\":[],\\\"data\\\":{}}],\\\"entityMap\\\":{}}\";\n\nconsole.log(content);\nconst  App = () => {\n    const [output, setValue] = useState();\n\n    const handleRecieveContent = (value) => {\n        setValue(value)\n    }\n\n    const handleRecieveEditorState = (state) => {\n\n    }\n\n\n    return (\n        <div className=\"rhContainer\">\n            <div className=\"rhEdit\">\n                <RhEditor\n                    startingBlocks={content}\n                    showControls\n                    recieveHtml={handleRecieveContent}\n                    recieveEditorState={handleRecieveEditorState}\n                />\n            </div>\n            <div className=\"rhOutput\">\n                <div dangerouslySetInnerHTML={{ __html: output }} />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}